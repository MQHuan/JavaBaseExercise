package com.teacher.javabase.javabaseexercise.demo;


import com.teacher.javabase.javabaseexercise.DemoBaseActivity;

public class FifthDayDemoActivity extends DemoBaseActivity {



  public void testMain() {
    //title:abstract
    fastLog("抽象详解:");

    abstract class Person
    {
      abstract void say();
    }
    class Teacher extends Person
    {
      void say()
      {
        fastLog("I am a teacher.");
      }
    }
    class Student extends Person
    {
      void say()
      {
        fastLog("I am a student.");
      }
    }

    Person t = new Teacher();
    Person s = new Student();

    t.say();
    s.say();

/*  知识点:
	抽象方法:在类中没有方法体的方法,就是抽象方法
	抽象类:含有抽象方法的类就叫抽象类.

	抽象类中的抽象方法必须被实现.
	(如果一个子类没有实现父类中的抽象方法,则子类也成为了一个抽象类!)
	抽象类中的普通方法,可以不必实现

	1.用abstract关键字来修饰一个类时,这个类叫做抽象类;
	  用abstract来修饰一个方法时,该方法叫做抽象方法.

	2.含有抽象方法的类必须被声明为抽象类,抽象类必须被继承,抽象方法必须被重写.

	3.抽象类不能被实例化(但可以声明抽象类的引用用于指向子类实例)

	4.抽象方法只需要声明,而不需实现某些功能.

*/


  }

  public void testKnowledage()
  {
    /*
     * 知识点1；多态
     多态前提
     (1)前提条件：
     A:要有继承关系或者实现关系。
     B:要有方法重写。（可以没有，如果没有这个多态就没什么意义）
     C:要有父类引用指向子类对象

     (2)在使用多态时，成员的特点。

     //		A:	成员变量
     //			编译看左边(其实就是程序包不报错),运行看左边（就是打印出来的结果是谁）。
     //		B:成员方法
     //			编译看左边(其实就是程序包不报错),运行看右边（就是打印出来的结果是谁）。
     假如说子父类中符合了上述三点多态前提：那么Fu f =new Zi（）;在用f对象掉成员的时候
     如果调用的是成员变量那么打印出来的是父类的成员，如果调用的是成员方法那么打印出来的是子类的成员方法。

     (4)多态的弊端:可能会遇到类型转换异常， 如果遇到了规则如下：在对一个对象进行转型的时候只可以把他转换成它原本的类型，或者是其父类的类型。
     Fu f = new Zi(); //向上转型    把小类型转换成到大类型
     Zi z = (Zi)f; //向下转型       把大类型转换成到小类型
     (5)多态的好处：
     可以提高代码的扩展性和可维护性。

     知识点2：抽象类
     什么是抽象类呢？ 就是用关键字abstract修饰的类
     什么是抽象方法？ 这个方法没有方法体，并且这个方法用关键字abstract修饰
     抽象类的特点：
     A:抽象方法和抽象类用关键字abstract表示。
     B:有抽象方法的类一定是抽象类(或者接口)。
     抽象类中不一定有抽象方法。
     C:抽象类不能被实例化。
     那么，怎么实例化呢?
     通过子类对象进行实例化。
     D:如果一个类继承抽象类，那么
     这个类要么本身也是抽象类。
     这个类重写父类的所有抽象方法。
     抽象类中的成员特点：
     抽象类中 成员变量：即可以有常量也可以有变量
     抽象类中 成员方法：可以有抽象方法，也可以有非抽象方法。 抽象方法它是强制要求子类做某些事的。非抽象方法是为了提高代码的复用性。
     抽象类中 构造方法：是有构造方法的，它构造方法的作用是，在子类访问父类数据前对父类数据进行初始化的。


     知识点3：接口
     如何定义一个接口  interface接口名
     类与接口的关系是实现关系 用关键字implements来表示

     接口的特点：
     A:接口不能被实例化。
     B:接口中的方法：
     要么被子类重写。
     要么子类也是抽象类。

     接口的成员特点：
     成员变量：接口中只有常量。
     因为接口的成员变量有默认修饰符：
     public static final
     推荐：永远自己给出修饰符。
     构造方法：
     没有构造方法。
     任何类如果没有继承父类，那么这个类就继承自Object类。
     成员方法：接口中的方法都是抽象的。
     因为接口中的成员方法有默认修饰符：
     public abstract

     知识点4 类和接口的关系
     类和接口的关系：

     类与类关系：
     继承关系。而且只能单继承，可以多层继承。

     类与接口的关系：
     实现关系。可以单实现，也可以多实现。
     并且还可以在继承一个类的同时，实现多个接口。

     接口与接口的关系：
     继承关系。可以单继承，也可以多继承。
     */

  }
  public void testConclusion()
  {
    /*
    *1:多态(掌握)
	(1)对象在不同时刻表现出来的不同状态。
		举例：狗（狗、宠物、动物）
	(2)多态的前提
		A:要有继承或者实现关系。
		B:要有方法的重写/实现。
		C:要有父类引用或者父接口引用指向子类对象。

		注意：多态有三种体现形式
			类多态
			抽象类多态
			接口多态
	(3)多态中的成员特点：
		A:成员变量
			编译看左边，运行看左边。
		B:成员方法
			编译看左边，运行看右边。

		为什么?因为方法存在重写，而变量没有。


	(4)多态的弊端：
		父类(接口)引用不能使用子类特有功能。
		为了解决这个弊端，我们需要向下转型。

		Fu f = new Zi(); //向上转型
		Zi z = (Zi)f; //向下转型

		Zi z = new Zi();
	(5)多态的好处：
		可以提高代码的扩展性和可维护性。

2:抽象类(理解)
	(1)如果多个类中存在相同的方法声明，而方法体不一样，我们就可以只提取方法声明。
	   如果一个方法只有方法声明，没有方法体，那么这个方法必须用抽象修饰。
	   而一个类中如果有抽象方法，这个类必须定义为抽象类。
	(2)抽象类的特点
		A:抽象类和抽象方法必须使用abstract修饰
		B:抽象类不能被实例化
		C:抽象类有构造方法，用于子类实例化使用
		D:如果一个类是抽象类，那么，继承它的子类
			要么是抽象类。
			要么重写所有抽象方法。
	(3)抽象类的成员特点
		A:成员变量	可以变量，也可以是常量
		B:构造方法	有构造方法
		C:成员方法	可以有抽象方法，也可以有非抽象方法（全是抽象方法或者非抽象方法都是可以的）
	(4)抽象类的几个小问题
		A:抽象类不能被实例化，为什么有构造?
			用于子类实例化使用。
		B:一个类没有抽象方法，为什么定义为抽象类?
			不想被实例化，或者是抽取出来的一个规则类
		C:abstract不能和哪些关键字共存。
			final
			private
			static
	(5)案例：
		老师案例
		学生案例

3:接口(理解)
	(1)如果一个抽象类中的方法都是抽象的，这个时候，java就提供了一种
	   更抽象的表示形式：接口。
	   接口：interface
	   实现：implements

	   格式：
		interface 接口名{}

		class 类名 implements 接口名 {}
	(2)接口的特点：
		A:接口不能被实例化。
		B:一个类如果实现了接口：
			要么是抽象类。
			要么实现接口中的所有方法。
	(3)接口的成员特点：
		A:成员变量	只能是常量。默认修饰符 public static final
		B:成员方法	只能是抽象方法。默认修饰符 public abstract

		推荐：永远手动给出修饰符。
	(4)接口的思想特点：
		A:对外暴露的规则
		B:是功能的扩展
		C:降低耦合度
			耦合：类与类的关系
			内聚：类自己完成某件事情的能力

			高内聚，低耦合。
		D:接口可以多实现。
	(5)类，接口的关系
		A:类与类
			继承关系,只能单继承，可以多层继承。
		B:类与接口
			实现关系，可以单实现，也可以多实现。
			还可以在继承一个类的同时实现多个接口。
		C:接口与接口
			继承关系，可以单继承，也可以多继承。
	(6)抽象类和接口的关系?自己补齐。
                接口是一种特殊的抽象类，比抽象类更抽象，因为它里
	(7)案例：运动员和教练的案例。
*/
  }


}
